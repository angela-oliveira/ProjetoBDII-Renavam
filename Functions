######################## Função para o calculo renavam ########################

CREATE OR REPLACE FUNCTION calculo_renavam()
RETURNS char(13)
AS $$
DECLARE

	num INTEGER := 0;
	soma INTEGER := 0;
	ret INTEGER := 0;
	j INTEGER := 0;
	ren text := '';
	fatt INTEGER [] := array [3,2,9,8,7,6,5,4,3,2];
	
BEGIN
	
	FOR j in 1..10 LOOP
		num := trunc(random()*10);
		ren := ren || num;
		soma := soma + num * fatt[j];
		ret := (soma * 10) % 11;
		
	END LOOP;
	ren := ren || ret;
	RAISE NOTICE 'Retorno: %',ret;
	RAISE NOTICE 'RENAVAM: %',ren;
	return ren;
END; $$

LANGUAGE plpgsql;

	
############### Função que retorna  trigger para fazer Transferência de Propriedade ###############
		
CREATE OR REPLACE FUNCTION TransferenciaPropriedade()
RETURNS TRIGGER AS $$
BEGIN
	insert into transferencia select 
	old.idproprietario,old.renavam,OLD.idproprietario,OLD.dataaquisicao,new.dataaquisicao;
	return new;

END; $$
LANGUAGE plpgsql;

CREATE TRIGGER transferencia
AFTER
UPDATE ON veiculo
FOR EACH ROW
EXECUTE PROCEDURE TransferenciaPropriedade();

----Testando Trigger
update veiculo
set idproprietario = 3, dataaquisicao = '11/06/2019'
where renavam = '44129834981'



############### teste para licenciamento ###############

CREATE OR REPLACE FUNCTION TESTE1(placaa varchar ,ano1 integer,fator_pago varchar)
RETURNS boolean 
LANGUAGE plpgsql 
AS $$
DECLARE 
	
	REGISTRO RECORD;
	CUR_PLACA CURSOR FOR SELECT v.placa,v.ano,l.pago FROM veiculo v join licenciamento l
         on v.renavam = l.renavam 
	 where v.ano :: text LIKE v.placa || v.ano ORDER BY v.ano;
		ano1 integer;
		placaa varchar;
		
	CUR_pago CURSOR FOR SELECT l.pago FROM licenciamento l
	 where l.pago = 'S'
	 ORDER BY pago;
               S char;
	       N char;

BEGIN 

open CUR_PLACA;
OPEN CUR_PAGO;
ano1 = 0;
placaa = 0;
S = True;
N = False;


loop 
FETCH LAST FROM CUR_PLACA into REGISTRO;
EXIT WHEN NOT FOUND;
FETCH NEXT FROM CUR_PAGO into REGISTRO;
EXIT WHEN NOT FOUND;


IF REGISTRO.pago = 'S' then
   raise notice 'Licenciamento pode ser lançado %',pago;
   return True;
   else 
   raise notice 'Licenciamento não pode ser lançado %',pago;
   return False;
 
if REGISTRO.pago = 'S' then
	select placa, max(REGISTRO.placaa ) as Final_placa,
	case when Final_placa = '1' then '28-03-2019'
	when Final_placa = '2'then '28-03-2019'
	else 'valor não corresponde a nem uma placa'
	end as Data_limite
	from veiculo v join licenciamento l 
	on v.renavam = l.renavam 
	where v.placa;
end if ;
end if;
	if exists (select v.ano,l.datavenc  from veiculo v join licenciamento l 
	on v.renavam = l.renavam 
	where v.renavam = REGISTRO.placaa and l.datavenc= lpad ((datavenc || ano ),'0',4))then 
		 update veiculo 
		 set ano = ano1+1 
		 from licenciamento 
		 where renavam = REGISTRO.placaa and l.datavenc = lpad ((datavenc || ano ),'0',4);
	insert into veiculo
	  (datavenc,ano)
	  select datavenc,ano
	  from licenciamento;
	else 
	   insert into veiculo values(REGISTRO.placaa,lpad ((datavenc || ano ),'0',4),ano);
	                
	end if;
close CUR_PLACA;
close CUR_PAGO;

end loop;
END $$;

select TESTE1('AAA9911','2018','S')

DROP FUNCTION teste1(character varying,integer,character varying)

-------------INSERT PRA TESTE------------------------------------------
insert into licenciamento (ano,renavam,datavenc,pago ) values ('2016','63658269222','28-03-2019','S');


select * from veiculo
select * from licenciamento
